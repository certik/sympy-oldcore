The changelog is tracked at the web only:

http://code.google.com/p/sympy/wiki/Changes

Old Changelog:

March 25 2007, Fabian Seoane <fabian@fseoane.net>
       * isnumber() renamed to is_number for consistency with other methods in
       sympy and with assumptions, now it works as an assumption, so it is
       more intuitive: 
           x.is_real --> True/False
	   x.is_number --> True/False

March 24 2007, Fabian Seoane <fabian@fseoane.net>

	* implement slices on sympy's objects. Slices is now the recomended way to
	access all of sympy's nested objects. Examples: 
	   - know the arguments of a function: sin(x*y)[:] -- > (x*y,)
	   - arguments of Mul, Add, Pow, etc. : (1+x)[:] --> (1,x)
           - see also the new atoms function

	* some refactoring: make all the is* use the same syntax: 
	   * iscommutative -> is_commutative
	   still TODO: isnumber -> is_number
	
	* implemented Pow.base and Pow.exp as properties, removed get_baseandexp (use
	(p.exp, p.base) instead). Some code of get_baseandexp is still used inside Mul
	however
	
	* eliminate some nesting of args, which resulted in a cleaner __init__ for
	Pair
	
	* made .args private (._args), because now the way to access the object's arguments is
	via [:], i.e, (1+x)[:] will return (1,x)
	
	* .mhash is also private now, use .mhash() instead
	
	* removed contains_ncobject from Mul, use is_commutative instead on all
	classes
	
	* renamed Function.arg to Function._args for consistency with other classes
	and in view of supporting multi-variable functions in the future
	
	* type(Basic._args) changed from list to tuple. Better performance and more
	secure, since tuples are inmutable, as are sympy's objects. 
	
	* I**n simplifies for all n integers
	
	* new function atoms in sympy/core/basic.py, which I find extremely helpful:
	it will return the objects of lenght 1 in the expression, for example, if x, y
	are symbols, atoms(x+y**2 + 2*y + sin(x)) --> [x,y,2,sin(x)]. See the
	docstring for more info
	
	* test of atoms inside docstrings
	
	* import printing_gtk if required libraries are available
	
	* use the assumption is_commutative for common objects, remove the method
	commutative()
	
        * added this Changelog file


	 * Pair.coerce: not used outside addmul.py, maybe should be private
	
	TODO: 
	
	  * Numbers should also store it's values in _args. In Rational, put a p and
	  q properties for convienence
