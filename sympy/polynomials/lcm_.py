"""Least common multiple for the Polynomial class"""

from sympy.polynomials.base import *

def uv(f, g):
    """Uses euclidean algorithm for univariate polynomials for the gcd/

    Coeffs assumed to be in a field.
    """
    from sympy.polynomials import div_
    from sympy.polynomials import gcd_

    gcd = gcd_.uv(f, g)
    q, r = div_.mv(f*g, gcd)
    assert r.sympy_expr is S.Zero
    q = q[0] # q is a list!
    return q.as_monic()[1]

# TODO: implement uv_int?

def mv(f, g):
    """Computes the lcm of two polynomials.

    This is a special case of the intersection of two ideals using Groebner
    bases and the elimination theorem.
    """
    from sympy.polynomials import groebner_

    # Compute a lexicographic Groebner base of the sum of the
    # two principal ideals generated by t*f and (t-1)*g.
    t = Symbol('t', dummy=True)
    var = [t] + f.var
    G = groebner_.groebner([Polynomial(t*f.sympy_expr, var=var, order='1-el'),
                        Polynomial((t-1)*g.sympy_expr, var=var, order='1-el')],
                           reduced=True)

    # Now intersect this result with the polynomial ring in the
    # var in `var', that is, eliminate t.
    I = filter(lambda p: not t in list(p.sympy_expr.atoms(type=Symbol)), G)

    # The intersection should be a principal ideal, that is generated
    # by a single polynomial.
    if not len(I) == 1:
        raise PolynomialException("No single generator.")
    return Polynomial(I[0].sympy_expr, var=f.var, order=f.order)
